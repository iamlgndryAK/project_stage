#include <AFMotor.h>
#include <Servo.h>

#define dustPin A15
#define ledPower 22
int samplingTime = 280;
int deltaTime = 40;
int sleepTime = 9680;
float voMeasured = 0;
float calcVoltage = 0;
float dustDensity = 0;

const int flamesensorPin0 = A8;
const int flamesensorPin1 = A9;
const int flamesensorPin2 = A10;
const int flamesensorPin3 = A11;
const int flamesensorPin4 = A12;

float flame1;
float flame2;
float flame3;
float flame4;
float flame5; 

#define vibrationPin 23
int vibration_output {0};

#define rainPin A14
float rain_output {0};

#define smokePin1 A6
#define smokePin2 A7
#define smokePin3 A13
float smoke1_output {0};
float smoke2_output {0};
float smoke3_output {0};

const int trigPin1 = 24;
const int echoPin1 = 25;
const int trigPin2 = 26;
const int echoPin2 = 27;
const int trigPin3 = 28;
const int echoPin3 = 29;
const int trigPin4 = 30;
const int echoPin4 = 31;

float distance1;
float distance2;
float distance3;
float distance4;

const int headlightPin {53};
const int laserPin {48};

int pump_pin = 52;
int enA = 49;
int in1 = 50;
int in2 = 51;

Servo servo1;  
Servo servo2;

AF_DCMotor motor1(1);
AF_DCMotor motor2(2);
AF_DCMotor motor3(3);
AF_DCMotor motor4(4);

String inString = "";

enum MotorState {
  STOPPED,
  MOVE_FORWARD,
  MOVE_BACKWARD,
  MOVE_LEFT,
  MOVE_RIGHT,
};

MotorState motorState = STOPPED;

enum PumpState {
  STOP,
  ON
};

PumpState pumpState = STOP;

unsigned long previousTime = 0;
const unsigned long interval = 500;  // interval

void dust() {
  digitalWrite(ledPower, LOW);
  delayMicroseconds(samplingTime);
  voMeasured = analogRead(dustPin);
  delayMicroseconds(deltaTime);
  digitalWrite(ledPower, HIGH);
  delayMicroseconds(sleepTime);
  calcVoltage = voMeasured * (5.0 / 1024.0);
  dustDensity = 170 * calcVoltage - 0.1;
}

void flame() {
  flame1 = analogRead(flamesensorPin0);
  flame2 = analogRead(flamesensorPin0);
  flame3 = analogRead(flamesensorPin2);
  flame4 = analogRead(flamesensorPin3);
  flame5 = analogRead(flamesensorPin4);
}

void vibration() {
  vibration_output = digitalRead(vibrationPin);
}

void rain() {
  rain_output = analogRead(rainPin);
}

void smoke() {
  smoke1_output = analogRead(smokePin1);
  smoke2_output = analogRead(smokePin2);
  smoke3_output = analogRead(smokePin3);
}

float measureDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  unsigned long duration = pulseIn(echoPin, HIGH, 10000);
  if (duration == 0) {
    return 0;
  }
  float distance = (duration * 0.0343) / 2;
  return distance;
}

void setup() {
  Serial.begin(115200);
  pinMode(pump_pin, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(ledPower, OUTPUT);
  pinMode(headlightPin, OUTPUT);
  pinMode(laserPin, OUTPUT);
  
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(trigPin3, OUTPUT);
  pinMode(echoPin3, INPUT);
  pinMode(trigPin4, OUTPUT);
  pinMode(echoPin4, INPUT);

  servo1.attach(9);
  servo2.attach(10);

  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
	pinMode(in2, OUTPUT);

  analogWrite(enA, 255);

  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
}

void loop() {
  unsigned long currentTime = millis();
  
  if (currentTime - previousTime >= interval) {
    // Update previous time
    previousTime = currentTime;
    
    // Run the code that needs to execute every 2 seconds
    dust();
    flame();
    vibration();
    rain();
  
    distance1 = measureDistance(trigPin1, echoPin1);
    distance2 = measureDistance(trigPin2, echoPin2);
    distance3 = measureDistance(trigPin3, echoPin3);
    distance4 = measureDistance(trigPin4, echoPin4);
  }

  // Your existing loop code goes here
  if (Serial.available() > 0) {
    // Handle serial input
    char inChar = Serial.read();

    // Check if the character is a digit or a comma
    if (isDigit(inChar) || inChar == ',') {
      // Add the character to the string:
      inString += inChar;
    }

    // If you get a newline, process the input:
    if (inChar == '\n') {
      // Split the string into six parts using ',' as a delimiter
      int commaIndices[7];

      for (int i = 0; i < 7; ++i) {
        commaIndices[i] = inString.indexOf(',');
        if (commaIndices[i] != -1) {
          inString[commaIndices[i]] = ' '; 
        }
      }

      if (commaIndices[0] != -1 && commaIndices[1] != -1 && commaIndices[2] != -1 && commaIndices[3] != -1 && commaIndices[4] != -1 && commaIndices[5] != -1 && commaIndices[6] != -1) {
        int intValue1, intValue2, intValue3, intValue4, intValue5, intValue6, intValue7, intValue8;
        sscanf(inString.c_str(), "%d %d %d %d %d %d %d %d", &intValue1, &intValue2, &intValue3, &intValue4, &intValue5, &intValue6, &intValue7, &intValue8);

        servo1.write(intValue5);
        servo2.write(intValue6);

        if (intValue7 == 1) {
          digitalWrite(pump_pin, HIGH);
          digitalWrite(laserPin, HIGH);
          
        }
        else {
          digitalWrite(pump_pin, LOW);
          digitalWrite(laserPin, LOW);
        }

        if (intValue8 == 1) {
          digitalWrite(headlightPin, HIGH);
        }
        else {
          digitalWrite(headlightPin, LOW);
        }

        switch (motorState) {
        case STOPPED:
          if (intValue1 != 0) {
            motorState = MOVE_FORWARD;
            digitalWrite(LED_BUILTIN, HIGH);
            motor1.run(FORWARD);
            motor2.run(FORWARD);
            motor3.run(FORWARD);
            motor4.run(FORWARD);
            motor1.setSpeed(intValue1);
            motor2.setSpeed(intValue1);
            motor3.setSpeed(intValue1);
            motor4.setSpeed(intValue1);
          } else if (intValue2 != 0) {
            motorState = MOVE_BACKWARD;
            digitalWrite(LED_BUILTIN, LOW);
            motor1.run(BACKWARD);
            motor2.run(BACKWARD);
            motor3.run(BACKWARD);
            motor4.run(BACKWARD);
            motor1.setSpeed(intValue2);
            motor2.setSpeed(intValue2);
            motor3.setSpeed(intValue2);
            motor4.setSpeed(intValue2);
          } else if (intValue3 > 0) {
            motorState = MOVE_LEFT;
            motor1.run(BACKWARD);
            motor2.run(BACKWARD);
            motor3.run(FORWARD);
            motor4.run(FORWARD);
            motor1.setSpeed(intValue3);
            motor2.setSpeed(intValue3);
            motor3.setSpeed(intValue3);
            motor4.setSpeed(intValue3);
            digitalWrite(LED_BUILTIN, HIGH);
          } else if (intValue4 > 0) {
            motorState = MOVE_RIGHT;
            motor1.run(FORWARD);
            motor2.run(FORWARD);
            motor3.run(BACKWARD);
            motor4.run(BACKWARD);
            motor1.setSpeed(intValue4);
            motor2.setSpeed(intValue4);
            motor3.setSpeed(intValue4);
            motor4.setSpeed(intValue4);
            digitalWrite(LED_BUILTIN, HIGH);
          } else {
            digitalWrite(LED_BUILTIN, HIGH);
          }
          break;

        case MOVE_FORWARD:
          if (intValue1 == 0) {
            motorState = STOPPED;
            digitalWrite(LED_BUILTIN, LOW);
            motor1.setSpeed(0);
            motor2.setSpeed(0);
            motor3.setSpeed(0);
            motor4.setSpeed(0);
          }
          break;

        case MOVE_BACKWARD:
          if (intValue2 == 0) {
            motorState = STOPPED;
            digitalWrite(LED_BUILTIN, LOW);
            motor1.setSpeed(0);
            motor2.setSpeed(0);
            motor3.setSpeed(0);
            motor4.setSpeed(0);
          }
          break;

        case MOVE_LEFT:
          if (intValue3 == 0) {
            motorState = STOPPED;
            digitalWrite(LED_BUILTIN, LOW);
            motor1.setSpeed(0);
            motor2.setSpeed(0);
            motor3.setSpeed(0);
            motor4.setSpeed(0);
          }
          break;
        case MOVE_RIGHT:
          if (intValue4 == 0) {
            motorState = STOPPED;
            digitalWrite(LED_BUILTIN, LOW);
            motor1.setSpeed(0);
            motor2.setSpeed(0);
            motor3.setSpeed(0);
            motor4.setSpeed(0);
          }
          break;

        // Add additional cases for other states if needed

        default:
          break;
        }

        switch (pumpState) {
          case STOP:
            if (intValue7 != 0) {
              pumpState = ON;
              
              digitalWrite(in1, HIGH);
              digitalWrite(in2, LOW);

            }
            break;

          case ON:
            if (intValue7 == 0) {
              pumpState = STOP;
              
              digitalWrite(in1, LOW);
              digitalWrite(in2, LOW);
            }
            break;

          default:
            break;
        }

      }
      inString = "";
    }
  }

  Serial.println(String(dustDensity) + "," + String(vibration_output) + "," + String(rain_output) + "," + String(flame1) + "," + String(flame2) + "," + String(flame3) + "," + String(flame4) + "," + String(flame5) + "," + String(smoke1_output) + "," + String(smoke2_output) + "," + String(smoke3_output) + "," + String(distance1) + "," + String(distance2) + "," + String(distance3) + "," + String(distance4));
  
}
